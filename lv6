PRVI

import numpy as np
import matplotlib.pyplot as plt
from sklearn import datasets
from sklearn.cluster import KMeans

def generate_data(n_samples, flagc):
    if flagc == 1:
        random_state = 365
        X, y = datasets.make_blobs(n_samples=n_samples, random_state=random_state)
        
    elif flagc == 2:
        random_state = 148
        X, y = datasets.make_blobs(n_samples=n_samples, random_state=random_state)
        transformation = [[0.60834549, -0.63667341], [-0.40887718, 0.85253229]]
        X = np.dot(X, transformation)
        
    elif flagc == 3:
        random_state = 148
        X, y = datasets.make_blobs(n_samples=n_samples,
                                    centers=4,
                                    cluster_std=[1.0, 2.5, 0.5, 3.0],
                                    random_state=random_state)

    elif flagc == 4:
        X, y = datasets.make_circles(n_samples=n_samples, factor=.5, noise=.05)
        
    elif flagc == 5:
        X, y = datasets.make_moons(n_samples=n_samples, noise=.05)
    
    else:
        X = []

    return X

n_samples = 500
flagc = int(input("Unesite broj za generiranje podataka (1-5): "))
n_clusters = int(input("Unesite broj clustera: "))

X = generate_data(n_samples, flagc)

kmeans = KMeans(n_clusters, random_state=42)
y_kmeans = kmeans.fit_predict(X)

centroids = kmeans.cluster_centers_

plt.figure(figsize=(8, 6))
plt.scatter(X[:, 0], X[:, 1], c=y_kmeans, cmap='viridis', marker='o')
plt.scatter(centroids[:, 0], centroids[:, 1], c='red', s=200, marker='X', label='Centri klastera')
plt.title(f"Generirani podaci i KMeans klasteri (flagc={flagc})")
plt.xlabel("Feature 1")
plt.ylabel("Feature 2")
plt.legend()
plt.show()

print("Centri klastera:")
print(centroids)

Ovisno o načinu generiranja podataka, KMeans može ili ne može pravilno razvrstati podatke u klastere. Za složenije oblike (npr. krugove), KMeans neće biti efikasan bez dodatnih prilagodbi.
